% \iffalse meta-comment
%
% Copyright (C) 2009 by Elie Roux <elie.roux@telecom-bretagne.eu>
%
% This work is in the Public Domain.
%
% People who helped on this package:
%   Javier Bezos
%   Will Robertson
%   Hans Hagen
%   Heiko Oberdiek
%   Javier Mugica
%
% This work consists of the main source file luainputenc.dtx
% and the derived files
%    luainputenc.sty, luainputenc.lua, luainputenc.drv and
%    luainputenc.pdf
%
% Unpacking and documentation:
%    pdflatex luainputenc.dtx
%
%    The class ltxdoc loads the configuration file ltxdoc.cfg
%    if available. Here you can specify further options, e.g.
%    use A4 as paper format:
%       \PassOptionsToClass{a4paper}{article}
%
%<*ignore>
\begingroup

\input docstrip.tex
\Msg{************************************************************************}
\Msg{* Installation}
\Msg{* Package: luainputenc 2009/03/10 v0.92 inputenc package for LuaTeX}
\Msg{************************************************************************}

\keepsilent
\askforoverwritefalse

\let\MetaPrefix\relax

\preamble
This is a generated file.

Copyright (C) 2009 by Elie Roux <elie.roux@telecom-bretagne.eu>

This work is in the Public Domain.

People who helped on this package:
  Javier Bezos
  Will Robertson
  Hans Hagen
  Heiko Oberdiek
  Javier Mugica

This work consists of the main source file luainputenc.dtx
and the derived files
   luainputenc.sty, luainputenc.lua, luainputenc.drv and
   luainputenc.pdf

\endpreamble

\let\MetaPrefix\DoubleperCent

\generate{%
  \file{luainputenc.drv}{\from{luainputenc.dtx}{driver}}%
  \usedir{tex/lualatex/luainputenc}%
  \file{luainputenc.sty}{\from{luainputenc.dtx}{package}}%
}

% The following hacks are to generate a lua file with lua comments starting by -- instead of %%

\def\MetaPrefix{-- }

\def\luapostamble{%
  \MetaPrefix^^J%
  \MetaPrefix\space End of File `\outFileName'.%
}

\def\currentpostamble{\luapostamble}%

\generate{%
  \usedir{tex/lualatex/luainputenc}%
  \file{luainputenc.lua}{\from{luainputenc.dtx}{lua}}%
}

\nopreamble
\nopostamble

\generate{%
  \file{inputenc.sty.diff}{\from{luainputenc.dtx}{patch}}%
}

\obeyspaces
\Msg{************************************************************************}
\Msg{*}
\Msg{* To finish the installation you have to move the following}
\Msg{* files into a directory searched by TeX:}
\Msg{*}
\Msg{*     luainputenc.sty luainputenc.lua}
\Msg{*}
\Msg{* Happy TeXing!}
\Msg{*}
\Msg{************************************************************************}

\endgroup
%</ignore>
% \iffalse
%<package>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{luainputenc}
%<package>  [2009/03/10 v0.92 inputenc package for LuaTeX]
%<package>
% \fi
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\begin{document}
  \DocInput{luainputenc.dtx}%
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \GetFileInfo{luainputenc.sty}
%
% \title{The \textsf{luainputenc} package}
% \date{2009/03/10 v0.92}
% \author{Elie Roux \\ \texttt{elie.roux@telecom-bretagne.eu}}
%
% \maketitle
%
% \begin{abstract}
% Package to be used in addition to \textsf{inputenc} with LuaTeX.
% \end{abstract}
%
% \section{Documentation}
%
% This package is an addition to the package inputenc for Lua\TeX. In this package we simply call a function converting from a 8-bit encoding to UTF-8 in the Lua\TeX\ callback \texttt{process\_input\_buffer}.
%
% This package \textbf{does not} map 8-bit encodings to utf8. It allows Lua\TeX\ to read 8-bit characters, by converting each byte into a unicode character with the same character number. The resulting unicode characters are not true UTF-8, they are what we will call ``fake UTF-8". For example the byte 225 will be converted into the unicode character with number 225 (two bytes long). It will be true UTF-8 only if the encoding is latin1.
%
% To use this package you \textbf{must} load inputenc. Here is how it will work: the 8-bit encodings are converted into fake UTF-8 by \textsf{luainputenc}, so that the corresponding tokens are chars with the good numbers. Then \textsf{inputenc} reads the char numbers, and converts it into LICR (\LaTeX\ Internal Character Representation), with the font encoding.
%
% \textsf{luainputenc} only changes the input behaviour, it does not change the ouput behaviour. The consequence is that files will still be written by Lua\TeX\ in UTF-8 (fake UTF-8). In most cases it's not a problem, as most files will be written in LICR, meaning ASCII, which is both 8-bit and UTF-8. The problem comes when characters with a number $>$ 128 are written. This may happen if you use |\protect| in a section for example. In these cases, Lua\TeX\ will write fake UTF-8, and try to read 8-bit encoding, so it will get confused.
%
% The proposed solution is to unactivate the input conversion when we read certain files or extentions. This package should work with no change for most documents, but if you cook your own aux files with an unknown extention, you may have to force the package to read some files in UTF-8 instead of 8-bit. See comments in the \texttt{.sty} file to know the useful commands.
%
% This package \textbf{cannot} be used standalone, without \textsf{inputenc}, except for utf8, for which you \textbf{must not} load \textsf{inputenc}. As it can be confusing, the best way to use it is to patch \textsf{inputenc} so that the behaviour is the same as the old \LaTeX .
%
% Note that this package registers a function in the \texttt{open\_read\_file} callback, which means you won't be able to register another function in it. If you want to use this callbacks, which means that you want to use Lua\TeX\ with the new functionalities, the best thing is that you use UTF-8. In UTF-8 mode, this callback is not registered.
%
% \section{Files}
%
% This package contains a \texttt{.sty} file for both \LaTeX\ and Plain, a patch for inputenc to use \textsf{luainputenc} so that you can process old documents without changing anything, and the lua functions.
%
% \subsection{\texttt{inputenc.sty} patch}
%
% \textsf{luainputenc} can be called just before \texttt{inputenc} with the same option. The best thing would be to patch \textsf{inputenc} to use \textsf{luainputenc}, so that you don't have to change documents to load \textsf{luainputenc} especially. Here is a patch for inputenc.sty (you need ifluatex.sty):
%
% \iffalse
%<*patch>
% \fi
%
%
%    \begin{macrocode}

   \ifnum\@tempcnta<`#2\relax
      \advance\@tempcnta\@ne
   \repeat}
-\DeclareOption*{\inputencoding{\CurrentOption}}
+  
+\RequirePackage{ifluatex}
+
+\ifluatex
+
+\RequirePackage{luainputenc}
+
+\DeclareOption{utf8}{
+  \edef\inputencodingname{utf8}}
+\DeclareOption{utf8x}{
+  \edef\inputencodingname{utf8x}}
+\DeclareOption*{
+  \lIE@activate 
+  \inputencoding{\CurrentOption}}
+
+\else
+
+\DeclareOption*{
+\inputencoding{\CurrentOption}
+}
+
+\fi
+
 \ProcessOptions
 \endinput
 %%

%    \end{macrocode}
%
% \iffalse
%</patch>
% \fi
%
% \subsection{\texttt{luainputenc.sty}}
%
% This file takes the different options, and simply call the encoding translation function. There are basically two modes: when it is activated (any option you want), it translates files into fake UTF-8, if it is not (options utf8 and utf8x), it does nothing.
%
% The macro that may be called by the user are commented.
%
% \iffalse
%<*package>
% \fi
%
%    \begin{macrocode}

\@ifpackageloaded{luatextra}{}{\RequirePackage{luatextra}}

\luaUseModule{luainputenc}

\DeclareOption{utf8}{}

\DeclareOption{utf8x}{}

\DeclareOption*{\lIE@activate}

%    \end{macrocode}
%
% |\lIE@setstarted| and |\lIE@setstopped| are called when the fake UTF-8 translation must be activated or desactivated. You can call them several successive times. They are called very often, even if the package is not activated (for example if it's loaded with the utf8 option), but they act only if the package is activated.
%
%    \begin{macrocode}

\newcommand*\lIE@setstarted[0]{
\ifnum\lIE@activated=1
  \luadirect{luainputenc.setstarted()}
\fi
}

\newcommand*\lIE@setstopped[0]{
\ifnum\lIE@activated=1
  \luadirect{luainputenc.setstopped()}
\fi
}

%    \end{macrocode}
%
% The following 5 macros are made to declare a file that will have to be read in fake UTF-8 and not in 8-bit. These files are the ones that will be generated by \TeX . In \textbf{no way} this means you can include true UTF-8 files, it means that you can include files that have been written by Lua\TeX\ with \textsf{luainputenc}, which means files in fake UTF-8. The macros are very simple, when you call them with a file name (the same as the one you will use with \string\input ), it will read it with or without the fake UTF-8 translation. This package includes a whole bunch of extentions that will be read in fake UTF-8, so the occasions to use these macros will be rare, but if you use them, please report it to the package maintainer.
%
% \begin{macro}{\lIE@SetUtfFile}
%
% If you call this macro with a file name, each time you will input this file, it will be read in fake UTF-8. You can call it with a file that you generate with Lua\TeX\ and that you want to include.
%
%    \begin{macrocode}

\newcommand*\lIE@SetUtfFile[1]{
\luadirect{luainputenc.set_unicode_file([[#1]])}
}

%    \end{macrocode}
%
% \end{macro}
%
% \begin{macro}{\lIE@SetNonUtfFile}
%
% Same as the previous macro, except that the file will be read as 8-bit. This macro is useful if there is an exception in an extention (see further comments).
%
%    \begin{macrocode}

\newcommand*\lIE@SetNonUtfFile[1]{
\luadirect{luainputenc.set_non_unicode_file([[#1]])}
}

%    \end{macrocode}
%
% \end{macro}
%
% \begin{macro}{\lIE@UnsetFile}
%
% This macro gives a file the default behaviour of its extention.
%
%    \begin{macrocode}

\newcommand*\lIE@UnsetFile[1]{
\luadirect{luainputenc.unset_file([[#1]])}
}

%    \end{macrocode}
%
% \end{macro}
%
% \begin{macro}{\lIE@SetUtfExt}
%
% You can tell \textsf{luainputenc} to treat all files with a particular extention in a certain way. The way the file extention is checked is to compare the four last characters of the filename. So if your extention has only three letters, you must include the preceding dot. This macro tells \textsf{luainputenc} to read all files from an extention in fake UTF-8.
%
%    \begin{macrocode}

\newcommand*\lIE@SetUtfExt[1]{
\luadirect{luainputenc.set_unicode_extention([[#1]])}
}

%    \end{macrocode}
%
% \end{macro}
%
% \begin{macro}{\lIE@SetUtfExt}
%
% Same as before, but the files will be read in 8-bit.
%
%    \begin{macrocode}

\newcommand*\lIE@SetNonUtfExt[1]{
\luadirect{luainputenc.set_non_unicode_extention([[#1]])}
}

%    \end{macrocode}
%
% \end{macro}
%
% \begin{macro}{\lIE@InputUtfFile}
%
% This macro inputs a file in fake UTF-8. It has the ``feature" to unset the behaviour on the file you will call, so to be safe, you must call them with files for which the behaviour has not been set.
%
%    \begin{macrocode}


\newcommand*\lIE@InputUtfFile[1]{
\lIE@SetUtfFile{#1}
\input #1
\lIE@UnsetFile{#1}
}

%    \end{macrocode}
%
% \end{macro}
%
% \begin{macro}{\lIE@InputNonUtfFile}
%
% Same as before, but to read a file as 8-bit.
%
%    \begin{macrocode}

\newcommand*\lIE@InputNonUtfFile[1]{
\lIE@SetNonUtfFile{#1}
\input #1
\lIE@UnsetFile{#1}
}

%    \end{macrocode}
%
% \end{macro}
%
% Two definitions to put the previous two macros in the user space.
%
%    \begin{macrocode}

\newcommand*\InputUtfFile[1]{
\lIE@InputUtfFile{#1}
}

\newcommand*\InputNonUtfFile[1]{
\lIE@InputNonUtfFile{#1}
}

\newcount\lIE@activated

\newcommand*{\lIE@activate}[0]{
\lIE@activated=1
\lIE@setstarted
}

\newcommand*{\lIE@FromInputenc}[1]{
\ifnum\lIE@activated=0
  \lIE@activate
\fi
}

\ProcessOptions*

%    \end{macrocode}
%
% \iffalse
%</package>
% \fi
%
% \subsection{\texttt{luainputenc.lua}}
%
% First the \texttt{inputenc} module is registered as a Lua\TeX\ module, with some informations.
%
% \iffalse
%<*lua>
% \fi
%
%    \begin{macrocode}

luainputenc = { }

luainputenc.module = {
    name          = "luainputenc",
    version       =  0.92,
    date          = "2009/03/10",
    description   = "Lua simple inputenc package.",
    author        = "Elie Roux",
    copyright     = "Elie Roux",
    license       = "CC0",
}

luatextra.provides_module(luainputenc.module)

local format = string.format

luainputenc.log = luainputenc.log or function(...)
  luatextra.module_log('luainputenc', format(...))
end

local char, utfchar, byte, format, gsub = string.char, unicode.utf8.char, string.byte, string.format, string.gsub

local started, stopped = 1, 0

luainputenc.state = stopped

function luainputenc.setstate(state)
    if state == luainputenc.state then
        return
    elseif state == started then
        luainputenc.start()
    else
        luainputenc.stop()
    end
end

function luainputenc.setstarted()
    luainputenc.setstate(started)
end

function luainputenc.setstopped()
    luainputenc.setstate(stopped)
end

%    \end{macrocode}
%
% The function to transform a 8-bit character in the corresponding fake UTF-8 character.
%
%    \begin{macrocode}

function luainputenc.byte_to_utf(c)
    return utfchar(byte(c))
end

%    \end{macrocode}
%
% The function that will be registered in the \texttt{process\_input\_buffer} callback when needed.
%
%    \begin{macrocode}

function luainputenc.fake_utf(buf)
    return gsub(buf,"(.)", luainputenc.byte_to_utf)
end

%    \end{macrocode}
%
% \texttt{start()} and \texttt{stop()} are the functions that register or unregister the function in the callback. When the function is registered, Lua\TeX\ reads the input in fake UTF-8.
%
%    \begin{macrocode}

function luainputenc.start()
    callback.add('process_input_buffer', luainputenc.fake_utf, 'luainputenc.fake_utf')
    luainputenc.state = started
    if luainputenc.callback_registered == 0 then
        luainputenc.register_callback()
    end
end

function luainputenc.stop()
    callback.remove('process_input_buffer', 'luainputenc.fake_utf')
    luainputenc.state = stopped
    return
end

%    \end{macrocode}
%
% Here is a list of all file extentions for which we consider that the files have been written by Lua\TeX , and thus must be read in fake UTF-8. I may have forgotten things in the list. If you find a new extention, please report the maintainer.
%
%    \begin{macrocode}

luainputenc.unicode_extentions = {
  ['.aux'] = 1, -- basic files
  ['.toc'] = 1,
  ['.gls'] = 1,
  ['.ind'] = 1,
  ['.idx'] = 1,
  ['.vrb'] = 1, -- beamer and powerdot
  ['.nav'] = 1, -- other beamer extentions
  ['.sol'] = 1,
  ['.qsl'] = 1,
  ['.snm'] = 1,
  ['.pgn'] = 1, -- pagereference
  ['.cpg'] = 1, -- AlProTeX
  ['.pst'] = 1, -- pst-tree
  ['.tmp'] = 1, -- sauerj/collect
  ['.sym'] = 1, -- listofsymbols
  ['.sub'] = 1, -- listofsymbols
  ['.lof'] = 1, -- preprint
  ['.lot'] = 1, -- preprint
  ['mtc1'] = 1, -- minitoc
  ['.ovr'] = 1, -- thumbss
  ['.fff'] = 1, -- endplate
  ['.sbb'] = 1, -- splitbib
  ['.bbl'] = 1, -- latex
  ['.ain'] = 1, -- authorindex
  ['.abb'] = 1, -- juraabbrev
  ['.ent'] = 1, -- endnotes
  ['.end'] = 1, -- fn2end
  ['.thm'] = 1, -- ntheorem
  ['.xtr'] = 1, -- extract
  ['.han'] = 1, -- linguho
  ['.bnd'] = 1, -- bibref
  ['.bbl'] = 1, -- bibref
  ['.col'] = 1, -- mwrite
  ['.ttt'] = 1, -- endfloat
  ['.fax'] = 1, -- lettre
  ['.tns'] = 1, -- lettre
  ['.odt'] = 1, -- lettre
  ['.etq'] = 1, -- lettre
  ['.emd'] = 1, -- poemscol
  ['.emx'] = 1, -- poemscol
  ['.ctn'] = 1, -- poemscol
  ['.hst'] = 1, -- vhistory
  ['.acr'] = 1, -- crosswrd
  ['.dwn'] = 1, -- crosswrd
  ['.ttc'] = 1, -- talk
  -- ['.txt'] = 1, -- coverpage, but not sure it's safe to include it...
  ['.eve'] = 1, -- calend0
  ['.scn'] = 1, -- cwebmac
  }

%    \end{macrocode}
%
% The code to define a specific behaviour for certain files.
%
%    \begin{macrocode}

luainputenc.unicode_files = {}

luainputenc.non_unicode_files = {}

function luainputenc.set_unicode_file(filename)
    if luainputenc.non_unicode_files[filename] == 1 then
        luainputenc.non_unicode_files[filename] = nil
    end
    luainputenc.unicode_files[filename] = 1
end

function luainputenc.set_non_unicode_file(filename)
    if luainputenc.unicode_files[filename] == 1 then
        luainputenc.unicode_files[filename] = nil
    end
    luainputenc.non_unicode_files[filename] = 1
end

function luainputenc.set_unicode_extention(ext)
    luainputenc.unicode_extention[ext] = 1
end

function luainputenc.set_non_unicode_extention(ext)
    if luainputenc.unicode_extentions[ext] == 1 then
        luainputenc.unicode_extentions[ext] = nil
    end
end

function luainputenc.unset_file(filename)
    if luainputenc.unicode_files[filename] == 1 then
        luainputenc.unicode_files[filename] = nil
    elseif luainputenc.non_unicode_files[filename] == 1 then
        luainputenc.non_unicode_files[filename] = nil
    end
end

local unicode, non_unicode = stopped, started

function luainputenc.find_state(filename)
    if luainputenc.unicode_files[filename] == 1 then
        return unicode
    elseif luainputenc.non_unicode_files[filename] == 1 then
        return non_unicode
    else
        local ext = filename:sub(-4)
         if luainputenc.unicode_extentions[ext] == 1 then
             return unicode
         else
            return non_unicode
         end
    end
end

%    \end{macrocode}
%
% The function that will be registered (if needed) in the \texttt{open\_read\_file} callback. It just reads the file normally, but starts or stops the translation at the beginning, and again at the end of the file.
%
%    \begin{macrocode}

function luainputenc.open_file(filename)
    local path = kpse.find_file(filename)
    if not path then
        return
    end
    local f = io.open(path)
    if not f then
        return
    end
    local currentstate = luainputenc.state
    luainputenc.setstate(luainputenc.find_state(filename))
    local env = {
      ['reader'] = luainputenc.reader,
      ['filename'] = filename,
      ['file'] = f,
      ['previousstate'] = currentstate,
      ['close'] = luainputenc.close
    }
    return env
end

function luainputenc.reader(env)
    return (env.file):read()
end

function luainputenc.close(env)
    luainputenc.setstate(env.previousstate)
    do (env.file):close() end
end

luainputenc.callback_registered = 0

function luainputenc.register_callback()
    if luainputenc.callback_registered == 0 then
        callback.add('open_read_file', luainputenc.open_file, 'luainputenc.open_file')
        luainputenc.callback_registered = 1
    end
end

%    \end{macrocode}
%
% \iffalse
%</lua>
% \fi
%
% \Finale
\endinput
